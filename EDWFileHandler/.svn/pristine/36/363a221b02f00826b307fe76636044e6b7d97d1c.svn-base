//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EDWFileHandler
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PAIEntities : DbContext
    {
        public PAIEntities()
            : base("name=PAIEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AIRTRACK> AIRTRACK { get; set; }
        public virtual DbSet<AIRTRACKDCSPAL> AIRTRACKDCSPAL { get; set; }
        public virtual DbSet<AIRTRACKFTLPFS> AIRTRACKFTLPFS { get; set; }
        public virtual DbSet<AIRTRACKRES> AIRTRACKRES { get; set; }
        public virtual DbSet<DATATRANSFERAIRTRACK> DATATRANSFERAIRTRACK { get; set; }
        public virtual DbSet<DATATRANSFEREDWDCS> DATATRANSFEREDWDCS { get; set; }
        public virtual DbSet<DATATRANSFEREDWFLT> DATATRANSFEREDWFLT { get; set; }
        public virtual DbSet<DATATRANSFEREDWRES> DATATRANSFEREDWRES { get; set; }
        public virtual DbSet<DATATRANSFERSIRAXIN> DATATRANSFERSIRAXIN { get; set; }
        public virtual DbSet<AirportsIATA> AirportsIATA { get; set; }
        public virtual DbSet<VLDSEG> VLDSEG { get; set; }
    
        public virtual int LoadAirtrack()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LoadAirtrack");
        }
    
        public virtual int LoadAirtrackFromFTL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LoadAirtrackFromFTL");
        }
    
        public virtual int GetFlightDetails(string depStn, string arrStn, ObjectParameter fltType, ObjectParameter distTravelled)
        {
            var depStnParameter = depStn != null ?
                new ObjectParameter("DepStn", depStn) :
                new ObjectParameter("DepStn", typeof(string));
    
            var arrStnParameter = arrStn != null ?
                new ObjectParameter("ArrStn", arrStn) :
                new ObjectParameter("ArrStn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFlightDetails", depStnParameter, arrStnParameter, fltType, distTravelled);
        }
    
        public virtual ObjectResult<GetResSRXMatchedRecords_Result> GetResSRXMatchedRecords(Nullable<bool> isDayChanges, string docNo, Nullable<System.DateTime> departureDate, Nullable<bool> missingData)
        {
            var isDayChangesParameter = isDayChanges.HasValue ?
                new ObjectParameter("IsDayChanges", isDayChanges) :
                new ObjectParameter("IsDayChanges", typeof(bool));
    
            var docNoParameter = docNo != null ?
                new ObjectParameter("DocNo", docNo) :
                new ObjectParameter("DocNo", typeof(string));
    
            var departureDateParameter = departureDate.HasValue ?
                new ObjectParameter("DepartureDate", departureDate) :
                new ObjectParameter("DepartureDate", typeof(System.DateTime));
    
            var missingDataParameter = missingData.HasValue ?
                new ObjectParameter("MissingData", missingData) :
                new ObjectParameter("MissingData", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetResSRXMatchedRecords_Result>("GetResSRXMatchedRecords", isDayChangesParameter, docNoParameter, departureDateParameter, missingDataParameter);
        }
    
        public virtual int GetFlightDetailsSIRAX(string depStn, string arrStn, ObjectParameter fltType, ObjectParameter depCity, ObjectParameter arrCity)
        {
            var depStnParameter = depStn != null ?
                new ObjectParameter("DepStn", depStn) :
                new ObjectParameter("DepStn", typeof(string));
    
            var arrStnParameter = arrStn != null ?
                new ObjectParameter("ArrStn", arrStn) :
                new ObjectParameter("ArrStn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFlightDetailsSIRAX", depStnParameter, arrStnParameter, fltType, depCity, arrCity);
        }
    
        public virtual int CheckDayChanged(string oGN, string dEST, Nullable<System.DateTime> dATOP, ObjectParameter dAY_CHANGED)
        {
            var oGNParameter = oGN != null ?
                new ObjectParameter("OGN", oGN) :
                new ObjectParameter("OGN", typeof(string));
    
            var dESTParameter = dEST != null ?
                new ObjectParameter("DEST", dEST) :
                new ObjectParameter("DEST", typeof(string));
    
            var dATOPParameter = dATOP.HasValue ?
                new ObjectParameter("DATOP", dATOP) :
                new ObjectParameter("DATOP", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CheckDayChanged", oGNParameter, dESTParameter, dATOPParameter, dAY_CHANGED);
        }
    
        public virtual ObjectResult<RetreiveReservationRecords_Result> RetreiveReservationRecords(string cCID, string sTNON, string sTNOFF, Nullable<System.DateTime> dATOP, string dOCNO, string fLTNO, string pAXNM)
        {
            var cCIDParameter = cCID != null ?
                new ObjectParameter("CCID", cCID) :
                new ObjectParameter("CCID", typeof(string));
    
            var sTNONParameter = sTNON != null ?
                new ObjectParameter("STNON", sTNON) :
                new ObjectParameter("STNON", typeof(string));
    
            var sTNOFFParameter = sTNOFF != null ?
                new ObjectParameter("STNOFF", sTNOFF) :
                new ObjectParameter("STNOFF", typeof(string));
    
            var dATOPParameter = dATOP.HasValue ?
                new ObjectParameter("DATOP", dATOP) :
                new ObjectParameter("DATOP", typeof(System.DateTime));
    
            var dOCNOParameter = dOCNO != null ?
                new ObjectParameter("DOCNO", dOCNO) :
                new ObjectParameter("DOCNO", typeof(string));
    
            var fLTNOParameter = fLTNO != null ?
                new ObjectParameter("FLTNO", fLTNO) :
                new ObjectParameter("FLTNO", typeof(string));
    
            var pAXNMParameter = pAXNM != null ?
                new ObjectParameter("PAXNM", pAXNM) :
                new ObjectParameter("PAXNM", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RetreiveReservationRecords_Result>("RetreiveReservationRecords", cCIDParameter, sTNONParameter, sTNOFFParameter, dATOPParameter, dOCNOParameter, fLTNOParameter, pAXNMParameter);
        }
    
        public virtual ObjectResult<GetResSRXMatchedRecordsNoDoc_Result> GetResSRXMatchedRecordsNoDoc(Nullable<bool> isDayChanges, string paxName, Nullable<System.DateTime> departureDate, string stnOn, string stnOff, string fltNo, Nullable<bool> missingData)
        {
            var isDayChangesParameter = isDayChanges.HasValue ?
                new ObjectParameter("IsDayChanges", isDayChanges) :
                new ObjectParameter("IsDayChanges", typeof(bool));
    
            var paxNameParameter = paxName != null ?
                new ObjectParameter("PaxName", paxName) :
                new ObjectParameter("PaxName", typeof(string));
    
            var departureDateParameter = departureDate.HasValue ?
                new ObjectParameter("DepartureDate", departureDate) :
                new ObjectParameter("DepartureDate", typeof(System.DateTime));
    
            var stnOnParameter = stnOn != null ?
                new ObjectParameter("StnOn", stnOn) :
                new ObjectParameter("StnOn", typeof(string));
    
            var stnOffParameter = stnOff != null ?
                new ObjectParameter("StnOff", stnOff) :
                new ObjectParameter("StnOff", typeof(string));
    
            var fltNoParameter = fltNo != null ?
                new ObjectParameter("FltNo", fltNo) :
                new ObjectParameter("FltNo", typeof(string));
    
            var missingDataParameter = missingData.HasValue ?
                new ObjectParameter("MissingData", missingData) :
                new ObjectParameter("MissingData", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetResSRXMatchedRecordsNoDoc_Result>("GetResSRXMatchedRecordsNoDoc", isDayChangesParameter, paxNameParameter, departureDateParameter, stnOnParameter, stnOffParameter, fltNoParameter, missingDataParameter);
        }
    }
}
